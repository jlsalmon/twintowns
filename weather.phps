<?php
/**
 * File: weather.php
 * Author: Justin Lewis Salmon
 * 
 * Description:
 *      Prints current weather conditions, astronomical data, satellite
 *      image and 10-day forecast for the current town and twin.
 * 
 *      This file embeds HTML generated by an XSLT Stylesheet defined
 *      elsewhere. The XSLTProcessor class is used to do the XSL
 *      transformation.
 */
include 'lib.php';

session_start();
$config = loadConfig();

$town = $config->xpath('//town[name="' . $_SESSION['town'] . '"]');
$twin = $config->xpath('//town[name="' . $_SESSION['twin'] . '"]');
?>
<div class="box-rounded">
    <h5 class="ui-widget-header">
        <span class="left">
            Current weather data for <? echo $_SESSION['town']; ?>
        </span>
        <span class="right">
            Current weather data for <? echo $_SESSION['twin']; ?>
        </span>
        <div class="clear"></div>
    </h5>
    <div class="box-inside">
        <div id="weather">
            <?
            printWeatherData($town, $xsl = 'xsl/wlive_town.xsl', $type = 'live');
            printWeatherData($twin, $xsl = 'xsl/wlive_twin.xsl', $type = 'live');
            ?>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div class="box-rounded">
    <h5 class="ui-widget-header">
        <span class="left">
            10-day forecast for <? echo $_SESSION['town']; ?>
        </span>
        <span class="right">
            10-day forecast for <? echo $_SESSION['twin']; ?>
        </span>
        <div class="clear"></div>
    </h5>
    <div class="box-inside">
        <div id="weather">
            <?
            printWeatherData($town, $xsl = 'xsl/wforecast_town.xsl', $type = 'forecast');
            printWeatherData($twin, $xsl = 'xsl/wforecast_twin.xsl', $type = 'forecast');
            ?>
        </div>
        <div class="clear"></div>
        <? printWeatherAttrib(); ?>
        <div class="clear"></div>
    </div>
</div>

<?

/**
 * Gets a weather feed for the given town, and uses the given XSL filename
 * to perform and print an XSL transformation.
 * 
 * @param SimpleXMLElement $town the XML tree for the current town.
 * @param string $xsl the filename of the XSL to be used.
 * @param string $type the type of feed to retrieve.
 */
function printWeatherData($town, $xsl, $type) {
    $xml_contents = getWeatherFeed($town, 
            ($type == "live" ? $type = 'live_ext' : $type = 'forecast_ext'));
    print doXSLTransform($xml_contents, $xsl);
}

/**
 * Builds a URL to a weather feed based on the parameters held in
 * the configuration file for the given town and retrieves the feed
 * itself.
 * 
 * @global SimpleXMLElement $config the global config XML tree.
 * @param SimpleXMLElement $town the XML tree for the current town.
 * @param string $type the type of feed to retrieve.
 * @return the XML feed as a string. 
 */
function getWeatherFeed($town, $type) {
    global $config;

    $module = $config->xpath('//module[name="Weather"]');
    $weather_params = $town[0]->xpath('weather');
    $feed_params = $weather_params[0]->xpath('source[@type="live"]');
    $base = $module[0]->xpath('url[@source="Weather Underground"]');

    $url = (string) ($base[0]->base
            . $module[0]->apikey
            . $base[0]->params[$type]
            . $feed_params[0]['wunderground_station_id']);
    return proxy_retrieve($url);
}

/**
 * Takes an XML string and the name of an XSL Stylesheet, and
 * returns the output HTML.
 * 
 * @param string $xml_contents the XML to be transformed.
 * @param string $xsl the path to the XSL file.
 * @return string the transformed HTML. 
 */
function doXSLTransform($xml_contents, $xsl) {
    $xml = new DOMDocument();
    $xml->loadXML($xml_contents);

    $xslt = new XSLTProcessor();
    $xsl_doc = new DOMDocument();
    $xsl_doc->load($xsl, LIBXML_NOCDATA);
    $xslt->importStylesheet($xsl_doc);
    return $xslt->transformToXML($xml);
}

/**
 * Displays an attribution link for Weather Underground.
 * 
 * @global SimpleXMLElement $config the global config XML tree.
 */
function printWeatherAttrib() {
    global $config;
    $source = $config->xpath('//module[name="Weather"]/url[@source="Weather Underground"]');
    ?>
    <div class="right">
        <span class="attribution">
            <?
            echo "<a href='" . $source[0]->attrib
            . "'><img src='" . $source[0]->image . "' /></a> ";
            ?>
        </span>
    </div>
    <?
}
?>
